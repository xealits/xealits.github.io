---
layout: post
title: Random tests
highlighter: rouge
---

Just testing markdown features in Jekyll.
<!--more-->

Let's try text bits.
Like **bold** text, for quesitons for example.
Then, *italic* for emphasis.
A link would look [like this](google.com).
And inline code is this: `import code` for example.

Small caps need a `<span>` and it looks like this:
<span style="font-variant:small-caps;">Small Caps</span>.

Unordered list:
* item
* another one

  with a paragraph
* *one more*
* one with code:
  ```bash
  echo foo | grep bar
  ```

* A larger item, with more text. Plural sentences.
Additional text.
And, also, a sub-list:
  + A point.
    - One more nesting.
  + One more point.

* And a wrapper.

And a test with an itemized list:
1. item 1
2. item 2

   With some more text. And a sub-list:
   1. This one.
   2. Another point.
3. third item

The spacing is a bit different between the items in the lists.
Ok, that's it.

{% include mathjax.html %}

# Basic features

Some text, and code:
```cpp
int main() {
  return 0;
}
```

Syntax highlighting works with `cpp` tag.
The markdown is written with triple `` ` `` code marks and marks the section `cpp`.
It can also be just monospace.

Also, how about some inline Latex-math?
E.g. this bit: $e = m c^2$ and $e^{i\pi} = -1$ work.
So, Mathjax should leave the backticks `` ` `` alone.
There is `$` for math.

When configured with `jax: ["input/TeX", ...]`,
Mathjax2 adds its elements only around those escaped ````` backticks.
Not around normal inlined `$` code.
And not around backticks with spaces: like this `` ` `` one.
(It all works smoothly in Mathjax3.)

Or like this:
{% highlight cpp %}
#include <iostream>
#include <vector>

// really long line
template<unsigned n, typename T> unsigned foo(T inp) {
  return inp[n].size();
}

struct MyStruct {
  std::vector<int> vec;
}

int main() {
  std::cout << "hello world!\n";
  std::vector<int> vecs[5];
  std::cout << sizeof(vecs) << '\n';
  std::cout << foo<3>(vecs) << '\n';
  return 0;
}
{% endhighlight %}

Some math from [a nice post](https://jojozhuang.github.io/tutorial/jekyll-math-symbols-with-mathjax/)
and many MathJax articles on internets:

\begin{equation}
\label{eq1}
 a^2 + b^2 = c^2
\end{equation}

More text:
> On the consumer side, you hear a clear promise to deliver a silver bullet for software development. Complexity has been one of fundamental problems of software, but now you hear something like “software is just plumbing” and that AI can automate it.
>
> The point is that a “just plumbing” part shouldn’t be the core value in your software. It’s great if something can be automated and maintained through AI. It would be even better to figure out how to eliminate it completely. However, the other side of this coin is that by automating or eliminating a routine component the software overall gets denser and more complex. That’s one of the 4 fundamental problems of software development, described in the “No silver bullet” paper by Fred Brooks long ago [3].
>
> Software becomes a condensed concentration of the know how of your application or organisation. Hopefully, the software is as complex as the know how and not more than that. The software also encodes the complexity of the hardware or whatever platform that runs the application. It’s just another part of your know how. Even if you do no-code, it’s probably better to actually know the capabilities of these services.
>
> Now, with AI boom, you hear the promise that there is finally the silver bullet that can automate and solve this concentration of complexity and know how.

Reference to \ref{eq1} as [Formula \ref{eq1}](#mjx-eqn:eq1).
Also check [Formula \ref{eq2}](#mjx-eqn:eq2) and [Formula \ref{eq3}](#mjx-eqn:eq3) (doesn't work).

And reference: \ref{eqFoo} like this?

# More normal text.

Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.

# Getting Mathjax to distinguish inline and block math in HTML

Also, how about some inline Latex-math?
E.g. these bits: $e = m c^2$ and $e^{i\pi} = -1$.
They also have this weirdo: \\( e=mc^2 \\) - does it work?

$\forall$ works now.

Now some block math from [the post](https://jojozhuang.github.io/tutorial/jekyll-math-symbols-with-mathjax/):

\begin{equation}
\label{eq2}
 a^2 + b^2 = c^2
\end{equation}

Or:

\begin{equation}
\label{eqFoo}
 a^2 + b^2 = c^2
\end{equation}

From mathjax test HTML:

When \\(a \ne 0\\), there are two solutions to \\(ax^2 + bx + c = 0\\) and they are
\\[
\label{eq3}
x = {-b \pm \sqrt{b^2-4ac} \over 2a}.
\\]

In this one, the label does not work.


